# RED Block CSI Driver (master)
#
# This driver version works with Kubernetes version >=1.16
#
# In production, each CSI driver deployment has to be customized to avoid conflicts,
# use non-default namespace and different names for non-namespaced entities like the ClusterRole
#
# Install to Kubernetes:
# $ kubectl apply -f deploy/kubernetes/red-csi-driver-block.yaml
#


# ------------------------------
# RED Block CSI Driver Namespace ! should be created at secret creation stage !
# -----------------------------
#apiVersion: v1
#kind: Namespace
#metadata:
#  name: red-block-csi


# ----------------------
# RED Block CSI Driver
# ----------------------
apiVersion: storage.k8s.io/v1 #k8s =>1.20
kind: CSIDriver
metadata:
  name: block.csi.red.ddn.com
spec:
  attachRequired: true
  podInfoOnMount: true
---


# ---------------------------------
# CSI Controller Server
# ---------------------------------
#
# Runs single driver controller server (driver + provisioner + attacher + snapshotter) on one of the nodes
#

apiVersion: v1
kind: ServiceAccount
metadata:
  name: red-block-csi-controller-service-account
  namespace: red-block-csi
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: red-block-csi-controller-cluster-role
  namespace: red-block-csi
  labels:
    app.kubernetes.io/name: red-block-csi-controller
rules:
- apiGroups: ['']
  resources: ['secrets']
  verbs: ['get', 'list', "watch"]
- apiGroups: ['']
  resources: ['persistentvolumes']
  verbs: ['get', 'list', 'watch', 'create', 'update', 'delete'] # "update" for attacher
- apiGroups: ['']
  resources: ['persistentvolumeclaims']
  verbs: ['get', 'list', 'watch', 'update']
- apiGroups: ['storage.k8s.io']
  resources: ['storageclasses']
  verbs: ['get', 'list', 'watch']
- apiGroups: ['']
  resources: ['events']
  verbs: ['list', 'watch', 'create', 'update', 'patch']
# attacher specific
- apiGroups: ['']
  resources: ['nodes']
  verbs: ['get', 'list', 'watch']
- apiGroups: ['csi.storage.k8s.io']
  resources: ['csinodeinfos']
  verbs: ['get', 'list', 'watch']
- apiGroups: ['storage.k8s.io']
  resources: ['volumeattachments']
  verbs: ['get', 'list', 'watch', 'update', 'patch']
- apiGroups: ['storage.k8s.io']
  resources: ['volumeattachments/status']
  verbs: ['get', 'list', 'watch', 'update', 'patch']
  # snapshotter specific
- apiGroups: ['apiextensions.k8s.io']
  #  - apiGroups: ['snapshot.storage.k8s.io']
  #    resources: ['volumesnapshotclasses']
  #    verbs: ['get', 'list', 'watch']
  #  - apiGroups: ['snapshot.storage.k8s.io']
  #    resources: ['volumesnapshotcontents']
  #    verbs: ['create', 'get', 'list', 'watch', 'update', 'delete']
  #  - apiGroups: ['snapshot.storage.k8s.io']
  #    resources: ['volumesnapshots']
  #    verbs: ['get', 'list', 'watch', 'update']
  #  - apiGroups: ["snapshot.storage.k8s.io"]
  #    resources: ["volumesnapshots/status"]
  #    verbs: ["update"]
  #  - apiGroups: ["snapshot.storage.k8s.io"]
  #    resources: ["volumesnapshotcontents/status"]
  #    verbs: ["update"]
  resources: ['customresourcedefinitions']
  verbs: ['create', 'list', 'watch', 'delete']
- apiGroups: [""]
  resources: ["persistentvolumeclaims/status"]
  verbs: ["update", "patch"]
  # CSINode specific
- apiGroups: ["storage.k8s.io"]
  resources: ["csinodes"]
  verbs: ["watch", "list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: red-block-csi-controller-cluster-role-binding
  labels:
    app.kubernetes.io/name: red-block-csi-controller
subjects:
- kind: ServiceAccount
  name: red-block-csi-controller-service-account
  namespace: red-block-csi
roleRef:
  kind: ClusterRole
  name: red-block-csi-controller-cluster-role
  apiGroup: rbac.authorization.k8s.io
---

# External Resizer
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-resizer-role
rules:
# The following rule should be uncommented for plugins that require secrets
# for provisioning.
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims/status"]
  verbs: ["update", "patch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-resizer-binding
subjects:
- kind: ServiceAccount
  name: red-block-csi-controller-service-account
  namespace: red-block-csi
roleRef:
  kind: ClusterRole
  name: csi-resizer-role
  apiGroup: rbac.authorization.k8s.io

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: red-block-csi
  name: external-resizer-cfg
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "watch", "list", "delete", "update", "create"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-resizer-role-cfg
  namespace: red-block-csi
subjects:
- kind: ServiceAccount
  name: red-block-csi-controller-service-account
  namespace: red-block-csi
roleRef:
  kind: Role
  name: external-resizer-cfg
  apiGroup: rbac.authorization.k8s.io
---

kind: Service
apiVersion: v1
metadata:
  name: red-block-csi-controller-service
  namespace: red-block-csi
  labels:
    app: red-block-csi-controller
spec:
  selector:
    app: red-block-csi-controller
  ports:
  - name: dummy
    port: 12345
---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: red-block-csi-controller
  namespace: red-block-csi
spec:
  # serviceName: red-block-csi-controller-service
  replicas: 1
  selector:
    matchLabels:
      app: red-block-csi-controller # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: red-block-csi-controller
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 1000
      serviceAccount: red-block-csi-controller-service-account
      containers:
      - name: csi-attacher
        image: registry.k8s.io/sig-storage/csi-attacher:v4.3.0
        imagePullPolicy: IfNotPresent
        args:
        - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
        - --v=2
        - --leader-election=true
        volumeMounts:
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy
      # csi-provisioner: sidecar container that watches Kubernetes PersistentVolumeClaim objects
      # and triggers CreateVolume/DeleteVolume against a CSI endpoint
      - name: csi-provisioner
        image: registry.k8s.io/sig-storage/csi-provisioner:v2.2.0
        imagePullPolicy: IfNotPresent
        args:
        - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
        - --volume-name-prefix=pvc-red
        - --strict-topology
        - --immediate-topology=false
        - --feature-gates=Topology=true
        - --timeout=15s
        - --retry-interval-start=10s
        volumeMounts:
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy
#        - name: csi-snapshotter
#          image: registry.k8s.io/sig-storage/csi-snapshotter:v4.1.1
#          imagePullPolicy: IfNotPresent
#          args:
#            - -v=3
#            - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
#          volumeMounts:
#            - name: socket-dir
#              mountPath: /var/lib/csi/sockets/pluginproxy
#      - name: csi-resizer
#        image: registry.k8s.io/sig-storage/csi-resizer:v1.7.0
#        args:
#        - "--csi-address=$(ADDRESS)"
#        env:
#        - name: ADDRESS
#          value: /var/lib/csi/sockets/pluginproxy/csi.sock
#        imagePullPolicy: "IfNotPresent"
#        volumeMounts:
#        - name: socket-dir
#          mountPath: /var/lib/csi/sockets/pluginproxy
      - name: driver
        image: quay.io/red/csi-driver-block:v1.1.2
        imagePullPolicy: Always
        args:
        - --nodeid=$(KUBE_NODE_NAME)
        - --endpoint=unix://csi/csi.sock
        - --role=controller
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        - name: secret
          mountPath: /config
          readOnly: true
          #        - name: certs-dir
          #          mountPropagation: HostToContainer
          #          mountPath: /usr/local/share/ca-certificates
      volumes:
      - name: socket-dir
        emptyDir:
      - name: secret
        secret:
          secretName: red-csi-driver-block-config
#      - name: certs-dir
#        hostPath:
#          path: /etc/ssl/  # change this to your tls certificates folder
#          type: Directory
---


# ---------------------------
# RED CSI Node Server
# ---------------------------
#
# Runs driver node server (driver + registrar) on each node
#

apiVersion: v1
kind: ServiceAccount
metadata:
  name: red-block-csi-node-service-account
  namespace: red-block-csi
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: red-block-csi-node-cluster-role
  namespace: red-block-csi
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "update"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: red-block-csi-node-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: red-block-csi-node-service-account
  namespace: red-block-csi
roleRef:
  kind: ClusterRole
  name: red-block-csi-node-cluster-role
  apiGroup: rbac.authorization.k8s.io
---

# RED Node Server as a daemon
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: red-block-csi-node
  namespace: red-block-csi
spec:
  selector:
    matchLabels:
      app: red-block-csi-node
  template:
    metadata:
      labels:
        app: red-block-csi-node
    spec:
      serviceAccount: red-block-csi-node-service-account
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 1000
      hostNetwork: true
      containers:
      # driver-registrar: sidecar container that:
      # 1) registers the CSI driver with kubelet
      # 2) adds the drivers custom NodeId to a label on the Kubernetes Node API Object
      - name: driver-registrar
        image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.5.1
        imagePullPolicy: IfNotPresent
        args:
        - --v=3
        - --csi-address=/csi/csi.sock
        - --kubelet-registration-path=/var/lib/kubelet/plugins/block.csi.red.ddn.com/csi.sock
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration
      - name: driver
        securityContext:
          privileged: true
          capabilities:
            add: ['SYS_ADMIN']
          allowPrivilegeEscalation: true
        image: quay.io/red/csi-driver-block:v1.1.2
        imagePullPolicy: Always
        args:
        - --nodeid=$(KUBE_NODE_NAME)
        - --endpoint=unix://csi/csi.sock
        - --role=node
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: secret
          mountPath: /config
        - name: host-dev
          mountPath: /dev
        - name: kubelet-mount-dir
          mountPath: /var/lib/kubelet
          mountPropagation: Bidirectional
          #        - name: certs-dir
          #          mountPropagation: HostToContainer
          #          mountPath: /usr/local/share/ca-certificates
      volumes:
      - name: plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins/block.csi.red.ddn.com
          type: DirectoryOrCreate
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry
          type: Directory
      - name: kubelet-mount-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: secret
        secret:
          secretName: red-csi-driver-block-config
      - name: host-dev
        hostPath:
          path: /dev
          type: Directory
---
